import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.datasets as datasets
from torchvision import models

transform = transforms.Compose([
    transforms.Resize(256),  # ResNet50 모델은 입력 이미지의 크기가 224 이상이어야 함
    transforms.CenterCrop(224),
    transforms.RandomRotation(10),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=128, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=128, shuffle=False)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

model = models.resnet50(weights=None)
# model = models.resnet50(pretrained=False)  # pretrained=True로 설정하면 사전 학습된 가중치 사용
model.fc = nn.Linear(model.fc.in_features, 10)  # 마지막 fc 레이어를 현재 문제에 맞게 수정
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-5)  # 가중치 정규화 적용

num_epochs = 10

for epoch in range(num_epochs):
    model.train()
    for images, labels in train_loader:
        images = images.to(device)
        labels = labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}')

# 모델 평가
model.eval()
total_correct = 0
total_samples = 0 

with torch.no_grad():
    for images, labels in test_loader:
        images = images.to(device)
        labels = labels.to(device)

        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        total_samples += labels.size(0)
        total_correct += (predicted == labels).sum().item()

accuracy = 100 * total_correct / total_samples
print(f'Test Accuracy: {accuracy}%')
#Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz
#100%|██████████| 170498071/170498071 [00:03<00:00, 42920354.06it/s]
#Extracting ./data/cifar-10-python.tar.gz to ./data
#Files already downloaded and verified
#Epoch [1/10], Loss: 1.1804313659667969
#Epoch [2/10], Loss: 1.074442744255066
#Epoch [3/10], Loss: 0.6645929217338562
#Epoch [4/10], Loss: 0.7463324666023254
#Epoch [5/10], Loss: 0.5810348391532898
#Epoch [6/10], Loss: 0.866346538066864
#Epoch [7/10], Loss: 0.6895423531532288
#Epoch [8/10], Loss: 0.40586328506469727
#Epoch [9/10], Loss: 0.38621294498443604
#Epoch [10/10], Loss: 0.5670933723449707
#Test Accuracy: 80.33%
